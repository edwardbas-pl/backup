#!/bin/python3
from natsort import natsorted # pip install natsort
import shutil
import sys
import os
#TODO make the scriot to be executed by default inside of the $HOME/Music directory

class PathDoesNotExist(Exception):
    def __init__(self):
        self.message = "provided path does not exist"
    def __str__(self):
        return self.message

def move_unmoved(list,path):
    to_move = natsorted(list)
    for i in to_move:
        shutil.copy2(i,path)

def import_play_dir(playlist_file,target_dir):
    dir_name=os.path.splitext(playlist_file)[0] #get rid of playlist file extension
    dir_name=dir_name.replace(" ","_")
    dir_to_create = target_dir+"/"+dir_name
    #print("dir to create: " + dir_to_create)
    os.system("mkdir -p " + dir_to_create)
    raw_list = []
    lista = []
    with open(playlist_file) as love:
        raw_list = love.readlines()
    for i in raw_list:
        i = i.replace("\n","")
        print(i)
        lista.append(i)
        shutil.copy2( i , dir_to_create+"/")
    return lista

def filter_list(excludes):
    ls = os.listdir(cwd)
    mp3_list = []
    for i in ls:
        extension = os.path.splitext(i)[1]
        if extension == ".mp3":
            if i in excludes:
                pass
            else:
                mp3_list.append(i)
    #for i in mp3_list:
     #   for j in excludes:
      #      if i == j:
       #         print(i)
        #        mp3_list.remove(i)
        #    else:
         #       pass
    #print("this should be list of umoved files: ")
    return mp3_list

def get_playlists(dir):
    ls = os.listdir(dir)
    list = []
    for i in ls:
        extension = os.path.splitext(i)[1]
        if extension == ".m3u":
            print(i +" "+ "is a playlist")
            list.append(i)
    return list

def main( arg ):
    #print(len(arg))
    global cwd
    cwd = os.getcwd()
#   ls = os.listdir(cwd)
    moved_list = []
    path=arg[1]
    raw_playlists = get_playlists(cwd)
    for i in raw_playlists:
        lista = import_play_dir(i,path)
        print(lista)

        for j in lista:
            if j in moved_list:
                pass
            else:
                moved_list.append(j)
    #print(moved_list)
    #print(len(moved_list))
    unmoved_list = filter_list(moved_list)
    move_unmoved(unmoved_list,path)

    #print(unmoved_list)
    #print(len(unmoved_list))

    


if __name__ == "__main__":
    try:
        if os.path.exists(sys.argv[1]) == False:
            raise PathDoesNotExist
        else:
            main(sys.argv)
    except PathDoesNotExist:
        print('provided path does not exist')
        quit()


