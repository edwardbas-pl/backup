#!/bin/python3
import sys
import os
import shutil
#TODO add flag to copy only playlists
#TODO add help page

def chceck_args(args,flags_enabeld_dict):
    flags = [ '-d' , "-v" ]
    for i in args:
        if i.lower() == '-v':
            print("Running in verbose mode")
            flags_enabeld_dict.update( {"Verbose Mode" : True })
            args.remove(i)
            pass
        if i.lower() == '-d':
            # print("dry run enabled")
            if flags_enabeld_dict["Verbose Mode"] == True:
                print("Enabled Dry Run")
            flags_enabeld_dict.update( {"Dry Run" : True })
            args.remove(i)
            pass
    for i in args:
        if os.path.exists(i):
            flags_enabeld_dict.update( { "Output Path" : str(i) } )
        else:
            args.remove(i)
        pass
    pass

def find_files_by_extension( ls , extension : str) -> list:
    file_list = []
    for i in ls:
        if os.path.isdir(i) == False:
            if os.path.splitext(i)[1] == extension:
                file_list.append(i)
                pass
        else:
            pass
    return file_list

def print_help() -> None:
    pass

def main(args):
    if '-h' or '--help' in args:
        print_help()
    flags = {
            "Dry Run" : False,
            "Verbose Mode" : False,
            # "Output Path" : os.getcwd()
            "Output Path" : "",
            "PWD" : os.getcwd(),
            "PWD_LS" : os.listdir(os.getcwd()) #content of working directory
            }
    Playlists = {} #Contains name of playlist file and its content
    not_moved_list = flags["PWD_LS"]
    moved_list = []
    # input("sorawdź tą liste")
    chceck_args(args,flags)

    if flags["Output Path"] == '':
        print("no pathh was provided... exiting...")
        exit()
        pass
    else:
        if flags["Verbose Mode"] == True:
            print("out path was provided")
        pass

    playlist_files_list = find_files_by_extension( flags["PWD_LS"] , ".m3u")
    for i in playlist_files_list: #Populating the PLaylists dictionary
        file_content = []
        f = open(i,"r")
        lines = f.readlines()
        for line in lines:
            line = line.replace("\n","")
            file_content.append(line)
            moved_list.append(line.replace("./",""))
        file_content.append(i)
        pass
        Playlists[i] = file_content
    if flags["Verbose Mode"] == True: #Enabling more information if verbose mode was toogled 
        print("Program found following playlist files")
        print(str(playlist_files_list)+ "\n")
        for i in Playlists:
            print(i + ": " + str(Playlists[i]) + "\n")
        pass
    if len(Playlists) <= 0:
        print("No Playlist file waas found...")
        print("program wil copy all music files to provided directory")
    if flags["Dry Run"] == False:
        # print("dry run is not enabled. program will copy playlists into provided directory")
        if flags["Verbose Mode"] == True:
            print("Creating playlist direcrtories andcopying files")
            pass
        for i in Playlists:
            folder_name = os.path.splitext(i)[0]
            out_dir = flags["Output Path"] + folder_name
            os.system("mkdir -p " + out_dir)
            content = Playlists[i]
            for j in content:
                # print(j.replace("./",""))
                shutil.copy2(j,out_dir+'/'+j.replace("./",""))
                if flags["Verbose Mode"] == True:
                    print(out_dir+j.replace("./",""))
                pass
        pass
    if flags["Verbose Mode"] == True:
        print("copying unmoved files to the root of Outpuut path")
    for i in moved_list:
        if i in not_moved_list:
            not_moved_list.remove(i)
    not_moved_dir = flags["Output Path"]+ "other" + '/' 
    os.system( 'mkdir -p ' + not_moved_dir )
    for i in not_moved_list:
        if flags["Verbose Mode"] == True:
            print(i)
            pass
        #print(not_moved_dir)
        #shutil.copy2(i,out_dir+'/'+i.replace("./",""))
        if os.path.isdir(i) == False:
            if os.path.splitext(i)[1] != ".m3u":
                if os.path.exists(i):
                    shutil.copy2(i , not_moved_dir  )
    return 0

if __name__ == "__main__":
    main(sys.argv[1:])
